From: Felix Fietkau <nbd@nbd.name>
Subject: debloat: disable common USB quirks

Signed-off-by: Felix Fietkau <nbd@nbd.name>
---
 drivers/usb/host/pci-quirks.c |  9 +++++++++
 drivers/usb/host/pci-quirks.h | 12 +++++++++---
 include/linux/usb/hcd.h       |  7 +++++++
 3 files changed, 28 insertions(+), 3 deletions(-)

--- a/drivers/usb/host/pci-quirks.c
+++ b/drivers/usb/host/pci-quirks.c
@@ -130,6 +130,8 @@ struct amd_chipset_type {
 	u8 rev;
 };
 
+#ifndef CONFIG_PCI_DISABLE_COMMON_QUIRKS
+
 static struct amd_chipset_info {
 	struct pci_dev	*nb_dev;
 	struct pci_dev	*smbus_dev;
@@ -588,8 +590,10 @@ bool usb_amd_pt_check_port(struct device
 	return !(value & BIT(port_shift));
 }
 EXPORT_SYMBOL_GPL(usb_amd_pt_check_port);
+#endif /* CONFIG_PCI_DISABLE_COMMON_QUIRKS */
 #endif /* CONFIG_USB_PCI_AMD */
 
+#ifndef CONFIG_PCI_DISABLE_COMMON_QUIRKS
 static int usb_asmedia_wait_write(struct pci_dev *pdev)
 {
 	unsigned long retry_count;
@@ -642,6 +646,7 @@ static inline int io_type_enabled(struct
 }
 
 #define mmio_enabled(dev) io_type_enabled(dev, PCI_COMMAND_MEMORY)
+#endif /* CONFIG_PCI_DISABLE_COMMON_QUIRKS */
 
 #if defined(CONFIG_HAS_IOPORT) && IS_ENABLED(CONFIG_USB_UHCI_HCD)
 /*
@@ -725,6 +730,7 @@ reset_needed:
 }
 EXPORT_SYMBOL_GPL(uhci_check_and_reset_hc);
 
+#ifndef CONFIG_PCI_DISABLE_COMMON_QUIRKS
 #define pio_enabled(dev) io_type_enabled(dev, PCI_COMMAND_IO)
 
 static void quirk_usb_handoff_uhci(struct pci_dev *pdev)
@@ -745,12 +751,14 @@ static void quirk_usb_handoff_uhci(struc
 		uhci_check_and_reset_hc(pdev, base);
 }
 
+#endif /* CONFIG_PCI_DISABLE_COMMON_QUIRKS */
 #else /* defined(CONFIG_HAS_IOPORT && IS_ENABLED(CONFIG_USB_UHCI_HCD) */
 
 static void quirk_usb_handoff_uhci(struct pci_dev *pdev) {}
 
 #endif /* defined(CONFIG_HAS_IOPORT && IS_ENABLED(CONFIG_USB_UHCI_HCD) */
 
+#ifndef CONFIG_PCI_DISABLE_COMMON_QUIRKS
 static int mmio_resource_enabled(struct pci_dev *pdev, int idx)
 {
 	return pci_resource_start(pdev, idx) && mmio_enabled(pdev);
@@ -1304,3 +1312,4 @@ static void quirk_usb_early_handoff(stru
 }
 DECLARE_PCI_FIXUP_CLASS_FINAL(PCI_ANY_ID, PCI_ANY_ID,
 			PCI_CLASS_SERIAL_USB, 8, quirk_usb_early_handoff);
+#endif /* CONFIG_PCI_DISABLE_COMMON_QUIRKS */
--- a/drivers/usb/host/pci-quirks.h
+++ b/drivers/usb/host/pci-quirks.h
@@ -2,7 +2,7 @@
 #ifndef __LINUX_USB_PCI_QUIRKS_H
 #define __LINUX_USB_PCI_QUIRKS_H
 
-#ifdef CONFIG_USB_PCI_AMD
+#if defined(CONFIG_USB_PCI_AMD) && !defined(CONFIG_PCI_DISABLE_COMMON_QUIRKS)
 int usb_hcd_amd_remote_wakeup_quirk(struct pci_dev *pdev);
 bool usb_amd_hang_symptom_quirk(void);
 bool usb_amd_prefetch_quirk(void);
@@ -33,11 +33,14 @@ static inline bool usb_amd_pt_check_port
 {
 	return false;
 }
-#endif /* CONFIG_USB_PCI_AMD */
+#endif /* CONFIG_USB_PCI_AMD && !CONFIG_PCI_DISABLE_COMMON_QUIRKS */
 
 #ifdef CONFIG_USB_PCI
 void uhci_reset_hc(struct pci_dev *pdev, unsigned long base);
 int uhci_check_and_reset_hc(struct pci_dev *pdev, unsigned long base);
+#endif  /* CONFIG_USB_PCI */
+
+#if defined(CONFIG_USB_PCI) && !defined(CONFIG_PCI_DISABLE_COMMON_QUIRKS)
 void usb_asmedia_modifyflowcontrol(struct pci_dev *pdev);
 void usb_enable_intel_xhci_ports(struct pci_dev *xhci_pdev);
 void usb_disable_xhci_ports(struct pci_dev *xhci_pdev);
@@ -45,6 +48,9 @@ void usb_disable_xhci_ports(struct pci_d
 struct pci_dev;
 static inline void usb_asmedia_modifyflowcontrol(struct pci_dev *pdev) {}
 static inline void usb_disable_xhci_ports(struct pci_dev *xhci_pdev) {}
-#endif  /* CONFIG_USB_PCI */
+#ifdef CONFIG_PCI_DISABLE_COMMON_QUIRKS
+static inline void usb_enable_intel_xhci_ports(struct pci_dev *xhci_pdev) {}
+#endif /* CONFIG_PCI_DISABLE_COMMON_QUIRKS */
+#endif /* CONFIG_USB_PCI && !CONFIG_PCI_DISABLE_COMMON_QUIRKS */
 
 #endif  /*  __LINUX_USB_PCI_QUIRKS_H  */
--- a/include/linux/usb/hcd.h
+++ b/include/linux/usb/hcd.h
@@ -486,7 +486,14 @@ extern void usb_hcd_pci_remove(struct pc
 extern void usb_hcd_pci_shutdown(struct pci_dev *dev);
 
 #ifdef CONFIG_USB_PCI_AMD
+#ifndef CONFIG_PCI_DISABLE_COMMON_QUIRKS
 extern int usb_hcd_amd_remote_wakeup_quirk(struct pci_dev *dev);
+#else
+static inline int usb_hcd_amd_remote_wakeup_quirk(struct pci_dev *dev)
+{
+	return 0;
+}
+#endif /* CONFIG_PCI_DISABLE_COMMON_QUIRKS */
 
 static inline bool usb_hcd_amd_resume_bug(struct pci_dev *dev,
 					  const struct hc_driver *driver)
